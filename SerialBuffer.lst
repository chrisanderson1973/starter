
C:\Documents and Settings\All Users\Desktop\CWork\Cortex\Projects\CortexAutoStart\SerialBuffer.o:     file format elf32-littlearm
C:\Documents and Settings\All Users\Desktop\CWork\Cortex\Projects\CortexAutoStart\SerialBuffer.o

Disassembly of section .text.DMA1_Channel4_IRQHandler:

00000000 <DMA1_Channel4_IRQHandler>:
DMA1_Channel4_IRQHandler():
C:\Documents and Settings\All Users\Desktop\CWork\Cortex\Projects\CortexAutoStart/SerialBuffer.c:143
 *-----------------------------------------------------------------*/

void DMA1_Channel4_IRQHandler(void)
{
	// Disable the DMA channel
	DMA1_Channel4->CCR = 0;
   0:	f240 0344 	movw	r3, #68	; 0x44
   4:	f2c4 0302 	movt	r3, #16386	; 0x4002
   8:	f04f 0100 	mov.w	r1, #0	; 0x0
   c:	6019      	str	r1, [r3, #0]
C:\Documents and Settings\All Users\Desktop\CWork\Cortex\Projects\CortexAutoStart/SerialBuffer.c:146

	// Reset interrupt pending bits for DMA1 Channel4
	DMA1->IFCR = 0x0000F000;
   e:	f240 0200 	movw	r2, #0	; 0x0
  12:	f2c4 0202 	movt	r2, #16386	; 0x4002
  16:	f44f 4370 	mov.w	r3, #61440	; 0xf000
  1a:	6053      	str	r3, [r2, #4]
C:\Documents and Settings\All Users\Desktop\CWork\Cortex\Projects\CortexAutoStart/SerialBuffer.c:149

	// Free up sio_buffer[]
	sio_index = 0;
  1c:	f240 0300 	movw	r3, #0	; 0x0
  20:	f2c0 0300 	movt	r3, #0	; 0x0
  24:	8019      	strh	r1, [r3, #0]
C:\Documents and Settings\All Users\Desktop\CWork\Cortex\Projects\CortexAutoStart/SerialBuffer.c:151

DMA1->IFCR = 0;
  26:	6051      	str	r1, [r2, #4]
C:\Documents and Settings\All Users\Desktop\CWork\Cortex\Projects\CortexAutoStart/SerialBuffer.c:152
}
  28:	4770      	bx	lr
  2a:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.get_serial_character:

00000000 <get_serial_character>:
get_serial_character():
C:\Documents and Settings\All Users\Desktop\CWork\Cortex\Projects\CortexAutoStart/SerialBuffer.c:164
	u8 write_index;

	// Get the index to the next available input character location
	// It is the place that DMA will put the next received character
	//  which is one past the last one received
	write_index = SERIAL_INPUT_SIZE - DMA1_Channel5->CNDTR;
   0:	f240 0358 	movw	r3, #88	; 0x58
   4:	f2c4 0302 	movt	r3, #16386	; 0x4002
   8:	685a      	ldr	r2, [r3, #4]
C:\Documents and Settings\All Users\Desktop\CWork\Cortex\Projects\CortexAutoStart/SerialBuffer.c:166

	if (read_index != write_index)
   a:	f240 0300 	movw	r3, #0	; 0x0
   e:	f2c0 0300 	movt	r3, #0	; 0x0
  12:	7819      	ldrb	r1, [r3, #0]
  14:	f1c2 0214 	rsb	r2, r2, #20	; 0x14
  18:	b2d2      	uxtb	r2, r2
  1a:	4291      	cmp	r1, r2
  1c:	bf08      	it	eq
  1e:	2000      	moveq	r0, #0
  20:	d017      	beq.n	52 <get_serial_character+0x52>
C:\Documents and Settings\All Users\Desktop\CWork\Cortex\Projects\CortexAutoStart/SerialBuffer.c:170
	{
		// There is a character in the input serial stream 

		*character = serial_input[read_index];
  22:	f240 0300 	movw	r3, #0	; 0x0
  26:	f2c0 0300 	movt	r3, #0	; 0x0
  2a:	5c5b      	ldrb	r3, [r3, r1]
  2c:	7003      	strb	r3, [r0, #0]
C:\Documents and Settings\All Users\Desktop\CWork\Cortex\Projects\CortexAutoStart/SerialBuffer.c:172

		if ( read_index < (SERIAL_INPUT_SIZE - 1) )
  2e:	2912      	cmp	r1, #18
C:\Documents and Settings\All Users\Desktop\CWork\Cortex\Projects\CortexAutoStart/SerialBuffer.c:173
			read_index++;
  30:	bf9f      	itttt	ls
  32:	f240 0300 	movwls	r3, #0	; 0x0
  36:	f2c0 0300 	movtls	r3, #0	; 0x0
  3a:	1c4a      	addls	r2, r1, #1
  3c:	701a      	strbls	r2, [r3, #0]
  3e:	bf91      	iteee	ls
  40:	2001      	movls	r0, #1
C:\Documents and Settings\All Users\Desktop\CWork\Cortex\Projects\CortexAutoStart/SerialBuffer.c:175
		else
			read_index = 0;
  42:	f240 0300 	movwhi	r3, #0	; 0x0
  46:	f2c0 0300 	movthi	r3, #0	; 0x0
  4a:	2200      	movhi	r2, #0
  4c:	bf84      	itt	hi
  4e:	701a      	strbhi	r2, [r3, #0]
  50:	2001      	movhi	r0, #1
C:\Documents and Settings\All Users\Desktop\CWork\Cortex\Projects\CortexAutoStart/SerialBuffer.c:181

		return TRUE;
	}
	else
		return FALSE;
}
  52:	4770      	bx	lr
Disassembly of section .text.hex_to_ascii:

00000000 <hex_to_ascii>:
hex_to_ascii():
C:\Documents and Settings\All Users\Desktop\CWork\Cortex\Projects\CortexAutoStart/SerialBuffer.c:192
 * Convert the lower nybble of the input byte to hex ASCII
 *-------------------------------------------------------*/

u8 hex_to_ascii(u8 number)
{
	number &= 0x0F;
   0:	f000 000f 	and.w	r0, r0, #15	; 0xf
C:\Documents and Settings\All Users\Desktop\CWork\Cortex\Projects\CortexAutoStart/SerialBuffer.c:194

	if (number <= 9)
   4:	2809      	cmp	r0, #9
C:\Documents and Settings\All Users\Desktop\CWork\Cortex\Projects\CortexAutoStart/SerialBuffer.c:195
		return number + '0';
   6:	bf94      	ite	ls
   8:	3030      	addls	r0, #48
C:\Documents and Settings\All Users\Desktop\CWork\Cortex\Projects\CortexAutoStart/SerialBuffer.c:200
	else
	{
		// The number is A-F
		// Add 55 to 10 to get 'A'
		return number + 0x37;
   a:	3037      	addhi	r0, #55
C:\Documents and Settings\All Users\Desktop\CWork\Cortex\Projects\CortexAutoStart/SerialBuffer.c:202
	}
}
   c:	4770      	bx	lr
   e:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.fill_a_byte:

00000000 <fill_a_byte>:
fill_a_byte():
C:\Documents and Settings\All Users\Desktop\CWork\Cortex\Projects\CortexAutoStart/SerialBuffer.c:214
 *  assemble them, high nybble first, into sio_buffer[], 
 *  ready to transmit.
 *--------------------------------------------------------*/

void fill_a_byte(u8 send_data)
{
   0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   4:	4680      	mov	r8, r0
C:\Documents and Settings\All Users\Desktop\CWork\Cortex\Projects\CortexAutoStart/SerialBuffer.c:215
	sio_buffer[sio_index++] = hex_to_ascii(send_data >> 4);
   6:	f240 0600 	movw	r6, #0	; 0x0
   a:	f2c0 0600 	movt	r6, #0	; 0x0
   e:	8834      	ldrh	r4, [r6, #0]
  10:	ea4f 1010 	mov.w	r0, r0, lsr #4
  14:	f7ff fffe 	bl	0 <fill_a_byte>
  18:	f240 0500 	movw	r5, #0	; 0x0
  1c:	f2c0 0500 	movt	r5, #0	; 0x0
  20:	5528      	strb	r0, [r5, r4]
  22:	f104 0401 	add.w	r4, r4, #1	; 0x1
  26:	b2a4      	uxth	r4, r4
C:\Documents and Settings\All Users\Desktop\CWork\Cortex\Projects\CortexAutoStart/SerialBuffer.c:216
	sio_buffer[sio_index++] = hex_to_ascii(send_data);
  28:	4640      	mov	r0, r8
  2a:	f7ff fffe 	bl	0 <fill_a_byte>
  2e:	5528      	strb	r0, [r5, r4]
  30:	f104 0401 	add.w	r4, r4, #1	; 0x1
  34:	8034      	strh	r4, [r6, #0]
C:\Documents and Settings\All Users\Desktop\CWork\Cortex\Projects\CortexAutoStart/SerialBuffer.c:217
}
  36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  3a:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.fill_an_int:

00000000 <fill_an_int>:
fill_an_int():
C:\Documents and Settings\All Users\Desktop\CWork\Cortex\Projects\CortexAutoStart/SerialBuffer.c:229
 *  assemble them, high nybble first, into sio_buffer[], 
 *  ready to transmit.
 *-----------------------------------------------------*/

void fill_an_int(u16 send_data)
{
   0:	b510      	push	{r4, lr}
   2:	b082      	sub	sp, #8
   4:	ac02      	add	r4, sp, #8
   6:	f824 0d02 	strh.w	r0, [r4, #-2]!
C:\Documents and Settings\All Users\Desktop\CWork\Cortex\Projects\CortexAutoStart/SerialBuffer.c:230
	fill_a_byte(((u8 *)&send_data)[1]);	//high byte
   a:	7860      	ldrb	r0, [r4, #1]
   c:	f7ff fffe 	bl	0 <fill_an_int>
C:\Documents and Settings\All Users\Desktop\CWork\Cortex\Projects\CortexAutoStart/SerialBuffer.c:231
	fill_a_byte(((u8 *)&send_data)[0]);	//low byte
  10:	7820      	ldrb	r0, [r4, #0]
  12:	f7ff fffe 	bl	0 <fill_an_int>
C:\Documents and Settings\All Users\Desktop\CWork\Cortex\Projects\CortexAutoStart/SerialBuffer.c:232
}
  16:	b002      	add	sp, #8
  18:	bd10      	pop	{r4, pc}
  1a:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.fill_a_long:

00000000 <fill_a_long>:
fill_a_long():
C:\Documents and Settings\All Users\Desktop\CWork\Cortex\Projects\CortexAutoStart/SerialBuffer.c:244
 *  assemble them, high nybble first, into sio_buffer,
 *  ready to transmit.
 *-----------------------------------------------------*/

void fill_a_long(u32 send_data)
{
   0:	b510      	push	{r4, lr}
   2:	b082      	sub	sp, #8
   4:	ac02      	add	r4, sp, #8
   6:	f844 0d04 	str.w	r0, [r4, #-4]!
C:\Documents and Settings\All Users\Desktop\CWork\Cortex\Projects\CortexAutoStart/SerialBuffer.c:245
	fill_an_int(((u16 *)&send_data)[1]);	//high int
   a:	ea4f 4010 	mov.w	r0, r0, lsr #16
   e:	f7ff fffe 	bl	0 <fill_a_long>
C:\Documents and Settings\All Users\Desktop\CWork\Cortex\Projects\CortexAutoStart/SerialBuffer.c:246
	fill_an_int(((u16 *)&send_data)[0]);	//low int
  12:	8820      	ldrh	r0, [r4, #0]
  14:	f7ff fffe 	bl	0 <fill_a_long>
C:\Documents and Settings\All Users\Desktop\CWork\Cortex\Projects\CortexAutoStart/SerialBuffer.c:247
}
  18:	b002      	add	sp, #8
  1a:	bd10      	pop	{r4, pc}
Disassembly of section .text.fill_a_number:

00000000 <fill_a_number>:
fill_a_number():
C:\Documents and Settings\All Users\Desktop\CWork\Cortex\Projects\CortexAutoStart/SerialBuffer.c:251


void fill_a_number(s32 data, u8 fract_digits)
{
   0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4:	b083      	sub	sp, #12
   6:	9101      	str	r1, [sp, #4]
C:\Documents and Settings\All Users\Desktop\CWork\Cortex\Projects\CortexAutoStart/SerialBuffer.c:259

	s8 digit;

	s32 divisor = 1000000000;

	if (data < 0)
   8:	f1b0 0800 	subs.w	r8, r0, #0	; 0x0
   c:	da43      	bge.n	8c <fill_a_number+0x8c>
C:\Documents and Settings\All Users\Desktop\CWork\Cortex\Projects\CortexAutoStart/SerialBuffer.c:261
	{
		sio_buffer[sio_index++] = '-';
   e:	f240 0000 	movw	r0, #0	; 0x0
  12:	f2c0 0000 	movt	r0, #0	; 0x0
  16:	8801      	ldrh	r1, [r0, #0]
  18:	f240 0300 	movw	r3, #0	; 0x0
  1c:	f2c0 0300 	movt	r3, #0	; 0x0
  20:	f04f 022d 	mov.w	r2, #45	; 0x2d
  24:	545a      	strb	r2, [r3, r1]
  26:	f101 0101 	add.w	r1, r1, #1	; 0x1
  2a:	8001      	strh	r1, [r0, #0]
C:\Documents and Settings\All Users\Desktop\CWork\Cortex\Projects\CortexAutoStart/SerialBuffer.c:262
		data = -data;
  2c:	f1c8 0800 	rsb	r8, r8, #0	; 0x0
  30:	e031      	b.n	96 <fill_a_number+0x96>
C:\Documents and Settings\All Users\Desktop\CWork\Cortex\Projects\CortexAutoStart/SerialBuffer.c:280
			printing = TRUE;
			sio_buffer[sio_index++] = hex_to_ascii(temp_byte);
			data -= (u32)temp_byte * divisor;			
		}

		divisor /= 10;
  32:	fb8a 3205 	smull	r3, r2, sl, r5
  36:	ea4f 73e5 	mov.w	r3, r5, asr #31
  3a:	ebc3 05a2 	rsb	r5, r3, r2, asr #2
C:\Documents and Settings\All Users\Desktop\CWork\Cortex\Projects\CortexAutoStart/SerialBuffer.c:267
		data = -data;
	}

	for (digit = 9; digit >= 0; digit--)
	{
		if (digit == fract_digits)
  3e:	4633      	mov	r3, r6
  40:	9a01      	ldr	r2, [sp, #4]
  42:	4296      	cmp	r6, r2
  44:	bf08      	it	eq
  46:	2101      	moveq	r1, #1
  48:	d006      	beq.n	58 <fill_a_number+0x58>
C:\Documents and Settings\All Users\Desktop\CWork\Cortex\Projects\CortexAutoStart/SerialBuffer.c:269
			printing = TRUE;
		else if (digit == fract_digits - 1)
  4a:	45b3      	cmp	fp, r6
C:\Documents and Settings\All Users\Desktop\CWork\Cortex\Projects\CortexAutoStart/SerialBuffer.c:270
			sio_buffer[sio_index++] = '.';
  4c:	bf01      	itttt	eq
  4e:	232e      	moveq	r3, #46
  50:	f809 3007 	strbeq.w	r3, [r9, r7]
  54:	1c7b      	addeq	r3, r7, #1
  56:	b29f      	uxtheq	r7, r3
C:\Documents and Settings\All Users\Desktop\CWork\Cortex\Projects\CortexAutoStart/SerialBuffer.c:272
	
		temp_byte = data / divisor;
  58:	fb98 f3f5 	sdiv	r3, r8, r5
  5c:	b2dc      	uxtb	r4, r3
C:\Documents and Settings\All Users\Desktop\CWork\Cortex\Projects\CortexAutoStart/SerialBuffer.c:273
		if (temp_byte || printing)
  5e:	b2cb      	uxtb	r3, r1
  60:	4323      	orrs	r3, r4
  62:	d00b      	beq.n	7c <fill_a_number+0x7c>
C:\Documents and Settings\All Users\Desktop\CWork\Cortex\Projects\CortexAutoStart/SerialBuffer.c:276
		{
			printing = TRUE;
			sio_buffer[sio_index++] = hex_to_ascii(temp_byte);
  64:	4620      	mov	r0, r4
  66:	f7ff fffe 	bl	0 <fill_a_number>
  6a:	f809 0007 	strb.w	r0, [r9, r7]
  6e:	f107 0301 	add.w	r3, r7, #1	; 0x1
  72:	b29f      	uxth	r7, r3
C:\Documents and Settings\All Users\Desktop\CWork\Cortex\Projects\CortexAutoStart/SerialBuffer.c:277
			data -= (u32)temp_byte * divisor;			
  74:	fb05 8814 	mls	r8, r5, r4, r8
  78:	f04f 0101 	mov.w	r1, #1	; 0x1
  7c:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
C:\Documents and Settings\All Users\Desktop\CWork\Cortex\Projects\CortexAutoStart/SerialBuffer.c:265
	{
		sio_buffer[sio_index++] = '-';
		data = -data;
	}

	for (digit = 9; digit >= 0; digit--)
  80:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
  84:	d1d5      	bne.n	ffffffb0 <read_index.2361+0xffffffb0>
  86:	f240 0300 	movw	r3, #0	; 0x0
  8a:	f2c0 0300 	movt	r3, #0	; 0x0
  8e:	801f      	strh	r7, [r3, #0]
C:\Documents and Settings\All Users\Desktop\CWork\Cortex\Projects\CortexAutoStart/SerialBuffer.c:282
			data -= (u32)temp_byte * divisor;			
		}

		divisor /= 10;
	}
}
  90:	b003      	add	sp, #12
  92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  96:	f240 0300 	movw	r3, #0	; 0x0
  9a:	f2c0 0300 	movt	r3, #0	; 0x0
  9e:	881f      	ldrh	r7, [r3, #0]
  a0:	f04f 0100 	mov.w	r1, #0	; 0x0
  a4:	f64c 2500 	movw	r5, #51712	; 0xca00
  a8:	f6c3 359a 	movt	r5, #15258	; 0x3b9a
  ac:	f04f 0609 	mov.w	r6, #9	; 0x9
C:\Documents and Settings\All Users\Desktop\CWork\Cortex\Projects\CortexAutoStart/SerialBuffer.c:269

	for (digit = 9; digit >= 0; digit--)
	{
		if (digit == fract_digits)
			printing = TRUE;
		else if (digit == fract_digits - 1)
  b0:	9a01      	ldr	r2, [sp, #4]
  b2:	f102 3bff 	add.w	fp, r2, #4294967295	; 0xffffffff
C:\Documents and Settings\All Users\Desktop\CWork\Cortex\Projects\CortexAutoStart/SerialBuffer.c:270
			sio_buffer[sio_index++] = '.';
  b6:	f240 0900 	movw	r9, #0	; 0x0
  ba:	f2c0 0900 	movt	r9, #0	; 0x0
C:\Documents and Settings\All Users\Desktop\CWork\Cortex\Projects\CortexAutoStart/SerialBuffer.c:280
			printing = TRUE;
			sio_buffer[sio_index++] = hex_to_ascii(temp_byte);
			data -= (u32)temp_byte * divisor;			
		}

		divisor /= 10;
  be:	f246 6367 	movw	r3, #26215	; 0x6667
  c2:	f2c6 6366 	movt	r3, #26214	; 0x6666
  c6:	469a      	mov	sl, r3
  c8:	e7b9      	b.n	83e <read_index.2361+0x83e>
  ca:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.fill_a_decimal:

00000000 <fill_a_decimal>:
fill_a_decimal():
C:\Documents and Settings\All Users\Desktop\CWork\Cortex\Projects\CortexAutoStart/SerialBuffer.c:286
	}
}


void fill_a_decimal(u32 decimal_data)
{
   0:	b510      	push	{r4, lr}
C:\Documents and Settings\All Users\Desktop\CWork\Cortex\Projects\CortexAutoStart/SerialBuffer.c:287
	fill_a_number(decimal_data, 0);
   2:	f04f 0100 	mov.w	r1, #0	; 0x0
   6:	f7ff fffe 	bl	0 <fill_a_decimal>
C:\Documents and Settings\All Users\Desktop\CWork\Cortex\Projects\CortexAutoStart/SerialBuffer.c:288
}
   a:	bd10      	pop	{r4, pc}
Disassembly of section .text.fill_a_string:

00000000 <fill_a_string>:
fill_a_string():
C:\Documents and Settings\All Users\Desktop\CWork\Cortex\Projects\CortexAutoStart/SerialBuffer.c:298
 *
 * Copy a string from program memory to sio_buffer[], ready to transmit
 *--------------------------------------------------------------------*/

void fill_a_string(s8 *input_string)
{
   0:	b410      	push	{r4}
   2:	4604      	mov	r4, r0
   4:	f04f 0100 	mov.w	r1, #0	; 0x0
C:\Documents and Settings\All Users\Desktop\CWork\Cortex\Projects\CortexAutoStart/SerialBuffer.c:303
	u8 index = 0;

	while (input_string[index] != NULL)
	{
		sio_buffer[sio_index++] = input_string[index++];
   8:	f240 0000 	movw	r0, #0	; 0x0
   c:	f2c0 0000 	movt	r0, #0	; 0x0
  10:	f240 0c00 	movw	ip, #0	; 0x0
  14:	f2c0 0c00 	movt	ip, #0	; 0x0
  18:	e009      	b.n	82e <read_index.2361+0x82e>
  1a:	8803      	ldrh	r3, [r0, #0]
  1c:	f80c 2003 	strb.w	r2, [ip, r3]
  20:	f103 0301 	add.w	r3, r3, #1	; 0x1
  24:	8003      	strh	r3, [r0, #0]
  26:	f101 0101 	add.w	r1, r1, #1	; 0x1
C:\Documents and Settings\All Users\Desktop\CWork\Cortex\Projects\CortexAutoStart/SerialBuffer.c:305
		
		if (index >= 60)
  2a:	293c      	cmp	r1, #60
  2c:	d002      	beq.n	834 <read_index.2361+0x834>
C:\Documents and Settings\All Users\Desktop\CWork\Cortex\Projects\CortexAutoStart/SerialBuffer.c:301

void fill_a_string(s8 *input_string)
{
	u8 index = 0;

	while (input_string[index] != NULL)
  2e:	5c62      	ldrb	r2, [r4, r1]
  30:	2a00      	cmp	r2, #0
  32:	d1f2      	bne.n	81a <read_index.2361+0x81a>
C:\Documents and Settings\All Users\Desktop\CWork\Cortex\Projects\CortexAutoStart/SerialBuffer.c:308
		sio_buffer[sio_index++] = input_string[index++];
		
		if (index >= 60)
			break;
	}
}
  34:	bc10      	pop	{r4}
  36:	4770      	bx	lr
Disassembly of section .text.buffer_is_busy:

00000000 <buffer_is_busy>:
buffer_is_busy():
C:\Documents and Settings\All Users\Desktop\CWork\Cortex\Projects\CortexAutoStart/SerialBuffer.c:323
}


bool buffer_is_busy(void)
{
	return (DMA1_Channel4->CCR & 1);
   0:	f240 0344 	movw	r3, #68	; 0x44
   4:	f2c4 0302 	movt	r3, #16386	; 0x4002
   8:	6818      	ldr	r0, [r3, #0]
C:\Documents and Settings\All Users\Desktop\CWork\Cortex\Projects\CortexAutoStart/SerialBuffer.c:324
}
   a:	f000 0001 	and.w	r0, r0, #1	; 0x1
   e:	4770      	bx	lr
Disassembly of section .text.wait_for_buffer:

00000000 <wait_for_buffer>:
wait_for_buffer():
C:\Documents and Settings\All Users\Desktop\CWork\Cortex\Projects\CortexAutoStart/SerialBuffer.c:335
 * Serial transmission uses DMA to send sio_buffer[]
 * Wait for a previous transmit to free up the DMA channel and sio_buffer[]
 *------------------------------------------------------------------------*/

void wait_for_buffer(void)
{
   0:	b510      	push	{r4, lr}
C:\Documents and Settings\All Users\Desktop\CWork\Cortex\Projects\CortexAutoStart/SerialBuffer.c:336
	while (buffer_is_busy());
   2:	f7ff fffe 	bl	0 <wait_for_buffer>
   6:	2800      	cmp	r0, #0
   8:	d1fb      	bne.n	2 <wait_for_buffer+0x2>
C:\Documents and Settings\All Users\Desktop\CWork\Cortex\Projects\CortexAutoStart/SerialBuffer.c:337
}
   a:	bd10      	pop	{r4, pc}
Disassembly of section .text.start_transmitting:

00000000 <start_transmitting>:
start_transmitting():
C:\Documents and Settings\All Users\Desktop\CWork\Cortex\Projects\CortexAutoStart/SerialBuffer.c:350
 *--------------------------------------------------------*/

void start_transmitting(void)
{
	// DMA1 Channel4 remaining bytes register
	DMA1_Channel4->CNDTR = sio_index;
   0:	f240 0300 	movw	r3, #0	; 0x0
   4:	f2c0 0300 	movt	r3, #0	; 0x0
   8:	881a      	ldrh	r2, [r3, #0]
   a:	f240 0344 	movw	r3, #68	; 0x44
   e:	f2c4 0302 	movt	r3, #16386	; 0x4002
  12:	605a      	str	r2, [r3, #4]
C:\Documents and Settings\All Users\Desktop\CWork\Cortex\Projects\CortexAutoStart/SerialBuffer.c:357
	// Setup the control register for memory to peripheral transfer,
	//  medium priority, 8 bits to peripheral, 8 bits from memory,
	//  increment memory address, do not increment peripheral address,
	//  disable circular mode, read from memory, interrupt on transfer 
	//  complete and enable the DMA channel
	DMA1_Channel4->CCR = (u32)0x00001093;			// .. 0001 0000 1001 0011
  14:	f241 0293 	movw	r2, #4243	; 0x1093
  18:	601a      	str	r2, [r3, #0]
C:\Documents and Settings\All Users\Desktop\CWork\Cortex\Projects\CortexAutoStart/SerialBuffer.c:358
}
  1a:	4770      	bx	lr
Disassembly of section .text.send_sio_buffer:

00000000 <send_sio_buffer>:
send_sio_buffer():
C:\Documents and Settings\All Users\Desktop\CWork\Cortex\Projects\CortexAutoStart/SerialBuffer.c:362


void send_sio_buffer(void)
{
   0:	b510      	push	{r4, lr}
C:\Documents and Settings\All Users\Desktop\CWork\Cortex\Projects\CortexAutoStart/SerialBuffer.c:363
	if (sio_index)
   2:	f240 0300 	movw	r3, #0	; 0x0
   6:	f2c0 0300 	movt	r3, #0	; 0x0
   a:	881b      	ldrh	r3, [r3, #0]
   c:	b10b      	cbz	r3, 12 <send_sio_buffer+0x12>
C:\Documents and Settings\All Users\Desktop\CWork\Cortex\Projects\CortexAutoStart/SerialBuffer.c:366
	{
		// Normal RS232 transmission
		start_transmitting();
   e:	f7ff fffe 	bl	0 <send_sio_buffer>
C:\Documents and Settings\All Users\Desktop\CWork\Cortex\Projects\CortexAutoStart/SerialBuffer.c:368
	}
  12:	bd10      	pop	{r4, pc}
Disassembly of section .text.send_a_string:

00000000 <send_a_string>:
send_a_string():
C:\Documents and Settings\All Users\Desktop\CWork\Cortex\Projects\CortexAutoStart/SerialBuffer.c:312
	}
}


void send_a_string(s8 *display_string)
{
   0:	b510      	push	{r4, lr}
   2:	4604      	mov	r4, r0
C:\Documents and Settings\All Users\Desktop\CWork\Cortex\Projects\CortexAutoStart/SerialBuffer.c:314
	// Wait for a previous transmit to complete so we can use sio_buffer[]
	wait_for_buffer();
   4:	f7ff fffe 	bl	0 <send_a_string>
C:\Documents and Settings\All Users\Desktop\CWork\Cortex\Projects\CortexAutoStart/SerialBuffer.c:316

	fill_a_string(display_string);
   8:	4620      	mov	r0, r4
   a:	f7ff fffe 	bl	0 <send_a_string>
C:\Documents and Settings\All Users\Desktop\CWork\Cortex\Projects\CortexAutoStart/SerialBuffer.c:317
	send_sio_buffer();
   e:	f7ff fffe 	bl	0 <send_a_string>
C:\Documents and Settings\All Users\Desktop\CWork\Cortex\Projects\CortexAutoStart/SerialBuffer.c:318
}
  12:	bd10      	pop	{r4, pc}
Disassembly of section .text.initialize_serial:

00000000 <initialize_serial>:
initialize_serial():
C:\Documents and Settings\All Users\Desktop\CWork\Cortex\Projects\CortexAutoStart/SerialBuffer.c:44
 *-------------------------------------------------------*/

#define BAUDRATE		9600

void initialize_serial(void)
{
   0:	b570      	push	{r4, r5, r6, lr}
C:\Documents and Settings\All Users\Desktop\CWork\Cortex\Projects\CortexAutoStart/SerialBuffer.c:48
	// Disable the USART, 1 start bit, 8 data bits, Wake on idle,
	//  no parity, disable all interrupts, enable transmitter, 
	//  enable receiver in active mode, do not send break
	USART1->CR1 = 0x0000000C;			// .. 0000 0000 0000 1100
   2:	f643 0200 	movw	r2, #14336	; 0x3800
   6:	f2c4 0201 	movt	r2, #16385	; 0x4001
   a:	f04f 030c 	mov.w	r3, #12	; 0xc
   e:	8193      	strh	r3, [r2, #12]
C:\Documents and Settings\All Users\Desktop\CWork\Cortex\Projects\CortexAutoStart/SerialBuffer.c:52

	// Disable LIN mode, one stop bit, disable the clock pin
	//  disable LIN interrupt, multiprocessor node address is 0
	USART1->CR2 = 0x00000000;			// .. 0000 0000 0000 0000
  10:	f04f 0500 	mov.w	r5, #0	; 0x0
  14:	8215      	strh	r5, [r2, #16]
C:\Documents and Settings\All Users\Desktop\CWork\Cortex\Projects\CortexAutoStart/SerialBuffer.c:57

	// Disable hardware flow control, enable DMA for transmit and receive,
	//  disable smartcard mode, no NAK on parity error, no half duplex,
	//  disable IrDA mode, no error interrupt
	USART1->CR3 = 0x000000C0;			// .. 0000 0000 1100 0000
  16:	f04f 03c0 	mov.w	r3, #192	; 0xc0
  1a:	8293      	strh	r3, [r2, #20]
C:\Documents and Settings\All Users\Desktop\CWork\Cortex\Projects\CortexAutoStart/SerialBuffer.c:66
	 *-----------------------*/

	// Configure the baud rate
	// SYSTEM_CLOCK_FREQ = 32M
	// BR = fclk / (16 * I.F)  ->  I.F = 32M / (16 * 9600) = 208 + 5/16
	USART1->BRR = ((u16)208 << 4) | 5;
  1c:	f640 5305 	movw	r3, #3333	; 0xd05
  20:	8113      	strh	r3, [r2, #8]
C:\Documents and Settings\All Users\Desktop\CWork\Cortex\Projects\CortexAutoStart/SerialBuffer.c:69

	// Enable USART1
    USART1->CR1 |= 0x2000;
  22:	8993      	ldrh	r3, [r2, #12]
  24:	b29b      	uxth	r3, r3
  26:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  2a:	8193      	strh	r3, [r2, #12]
C:\Documents and Settings\All Users\Desktop\CWork\Cortex\Projects\CortexAutoStart/SerialBuffer.c:83
	 * DMA Channel 4 control register and bytes remaining register are setup 
	 *  each time a transmission is requested so they are skipped here
	 *---------------------------------------------------------------------*/

	// Disable DMA1 Channel 4
	DMA1_Channel4->CCR = 0;
  2c:	f240 0244 	movw	r2, #68	; 0x44
  30:	f2c4 0202 	movt	r2, #16386	; 0x4002
  34:	6015      	str	r5, [r2, #0]
C:\Documents and Settings\All Users\Desktop\CWork\Cortex\Projects\CortexAutoStart/SerialBuffer.c:86

	// DMA1 Channel 4 peripheral address register
	DMA1_Channel4->CPAR = (u32)&USART1->DR;
  36:	f643 0404 	movw	r4, #14340	; 0x3804
  3a:	f2c4 0401 	movt	r4, #16385	; 0x4001
  3e:	6094      	str	r4, [r2, #8]
C:\Documents and Settings\All Users\Desktop\CWork\Cortex\Projects\CortexAutoStart/SerialBuffer.c:89
  
	// DMA1 Channel 4 memory address register
	DMA1_Channel4->CMAR = (u32)sio_buffer;
  40:	f240 0300 	movw	r3, #0	; 0x0
  44:	f2c0 0300 	movt	r3, #0	; 0x0
  48:	60d3      	str	r3, [r2, #12]
C:\Documents and Settings\All Users\Desktop\CWork\Cortex\Projects\CortexAutoStart/SerialBuffer.c:92
  
	// Reset interrupt pending bits for DMA1 Channel 4
	DMA1->IFCR = 0x0000F000;
  4a:	f240 0300 	movw	r3, #0	; 0x0
  4e:	f2c4 0302 	movt	r3, #16386	; 0x4002
  52:	f44f 4270 	mov.w	r2, #61440	; 0xf000
  56:	605a      	str	r2, [r3, #4]
C:\Documents and Settings\All Users\Desktop\CWork\Cortex\Projects\CortexAutoStart/SerialBuffer.c:100
	 * Configure the Nested Vectored Interrupt Controller
	 *--------------------------------------------------*/

	// Configure the NVIC DMA1 Channel 4 interrupt priority and
	//  enable its IRQ Channel (only upper four bits used)
	enable_interrupt(DMA1_Channel4_IRQn, 0x10);
  58:	f04f 000e 	mov.w	r0, #14	; 0xe
  5c:	f04f 0110 	mov.w	r1, #16	; 0x10
  60:	f7ff fffe 	bl	0 <enable_interrupt>
C:\Documents and Settings\All Users\Desktop\CWork\Cortex\Projects\CortexAutoStart/SerialBuffer.c:111
	 *  not disabled.  We use the number of data to transfer register to 
	 *  tell where the most recent character is located.
	 *------------------------------------------------------------------*/

	// Disable DMA1 Channel 5
	DMA1_Channel5->CCR = 0;
  64:	f240 0258 	movw	r2, #88	; 0x58
  68:	f2c4 0202 	movt	r2, #16386	; 0x4002
  6c:	6015      	str	r5, [r2, #0]
C:\Documents and Settings\All Users\Desktop\CWork\Cortex\Projects\CortexAutoStart/SerialBuffer.c:114

	// DMA1 Channel 5 peripheral address register
	DMA1_Channel5->CPAR = (u32)&USART1->DR;
  6e:	6094      	str	r4, [r2, #8]
C:\Documents and Settings\All Users\Desktop\CWork\Cortex\Projects\CortexAutoStart/SerialBuffer.c:117
  
	// DMA1 Channel 5 memory address register
	DMA1_Channel5->CMAR = (u32)serial_input;
  70:	f240 0300 	movw	r3, #0	; 0x0
  74:	f2c0 0300 	movt	r3, #0	; 0x0
  78:	60d3      	str	r3, [r2, #12]
C:\Documents and Settings\All Users\Desktop\CWork\Cortex\Projects\CortexAutoStart/SerialBuffer.c:120
  
	// DMA1 Channel 5 remaining bytes register
	DMA1_Channel5->CNDTR = SERIAL_INPUT_SIZE;
  7a:	f04f 0314 	mov.w	r3, #20	; 0x14
  7e:	6053      	str	r3, [r2, #4]
C:\Documents and Settings\All Users\Desktop\CWork\Cortex\Projects\CortexAutoStart/SerialBuffer.c:127
	// Setup the control register for peripheral to memory transfer,
	//  medium priority, 8 bits to memory, 8 bits from peripheral,
	//  increment memory address, do not increment peripheral address,
	//  enable circular mode, read from peripheral, no interrupts, 
	//  enable the DMA channel
	DMA1_Channel5->CCR = 0x10A1;			// .. 0001 0000 1010 0001
  80:	f241 03a1 	movw	r3, #4257	; 0x10a1
  84:	6013      	str	r3, [r2, #0]
C:\Documents and Settings\All Users\Desktop\CWork\Cortex\Projects\CortexAutoStart/SerialBuffer.c:129

	sio_index = 0;
  86:	f240 0300 	movw	r3, #0	; 0x0
  8a:	f2c0 0300 	movt	r3, #0	; 0x0
  8e:	801d      	strh	r5, [r3, #0]
C:\Documents and Settings\All Users\Desktop\CWork\Cortex\Projects\CortexAutoStart/SerialBuffer.c:130
}
  90:	bd70      	pop	{r4, r5, r6, pc}
  92:	46c0      	nop			(mov r8, r8)
